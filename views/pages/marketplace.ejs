<!DOCTYPE html>
<html lang="en">
<head>
    <title>Marketplace - Hue Horizon</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
    <link href="https://api.fontshare.com/v2/css?f[]=satoshi@300&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            font-family: 'Satoshi', sans-serif;
        }
        .artwork-card {
            transition: all 0.3s ease;
            opacity: 1; /* Ensure cards are visible by default */
        }
        .artwork-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }
        .artwork-overlay {
            background: linear-gradient(0deg, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0.4) 50%, rgba(0,0,0,0) 100%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        .artwork-card:hover .artwork-overlay {
            opacity: 1;
        }
        /* Make favorite button always visible */
        .favorite-btn {
            opacity: 1 !important;
            background: rgba(0, 0, 0, 0.3);
        }
        .favorite-btn .fas.fa-heart {
            transition: color 0.3s ease;
        }
        .favorite-btn:hover {
            background: rgba(0, 0, 0, 0.5);
        }


    </style>
</head>
<body class="bg-gray-100">

    <%- include('../partials/navbar.ejs') %>


    <main>
        <!-- Hero Section -->
        <section class="relative h-[60vh] bg-gradient-to-r from-gray-900 to-gray-800">
            <div class="absolute inset-0 bg-gradient-to-r from-black/80 to-transparent"></div>
            <div class="relative h-full flex items-center">
                <div class="container mx-auto px-6">
                    <div class="max-w-3xl">
                        <h1 class="text-6xl font-light text-white mb-6">Art Marketplace</h1>
                        <p class="text-xl text-gray-200 mb-8">Discover and collect unique artworks from talented artists around the world.</p>
                        <div class="flex gap-4">
                            <a href="#artworks" class="px-8 py-3 bg-amber-50 text-black rounded-lg hover:bg-amber-200 transition-colors">
                                Browse Artworks
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Filter Section -->
        <section class="py-8 bg-white border-b">
            <div class="container mx-auto px-6">
                <div class="flex flex-wrap items-center gap-4">
                    <div class="flex items-center gap-2">
                        <label for="sort" class="text-gray-700">Sort by:</label>
                        <select id="sort" class="px-4 py-2 border rounded-lg" onchange="updateSort(this.value)">
                            <option value="latest">Latest</option>
                            <option value="price-low">Price: Low to High</option>
                            <option value="price-high">Price: High to Low</option>
                        </select>
                    </div>
                    <div class="flex items-center gap-2">
                        <label for="priceRange" class="text-gray-700">Price Range:</label>
                        <select id="priceRange" class="px-4 py-2 border rounded-lg" onchange="updatePriceRange(this.value)">
                            <option value="all">All Prices</option>
                            <option value="0-50">Under $50</option>
                            <option value="50-100">$50 - $100</option>
                            <option value="100-500">$100 - $500</option>
                            <option value="500+">$500+</option>
                        </select>
                    </div>
                </div>
            </div>
        </section>

        <!-- Artworks Grid -->
        <section id="artworks" class="py-20">
            <div class="container mx-auto px-6">
                <div id="artworksGrid" class="columns-1 gap-4 sm:columns-2 lg:columns-3 xl:columns-4">
                    <!-- Loading state -->
                    <div class="break-inside-avoid">
                        <div class="animate-pulse grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
                            <% for (let i = 0; i < 8; i++) { %>
                                <div class="bg-gray-200 rounded-lg aspect-[3/4] mb-4"></div>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <!-- Footer -->
    <%- include('../partials/footer.ejs') %>


    <!-- Add notification system at the bottom of body -->
    <div id="notification" class="fixed bottom-4 right-4 transform translate-y-full opacity-0 transition-all duration-300 z-50">
        <div class="bg-black text-white px-6 py-3 rounded-lg shadow-lg flex items-center gap-3">
            <i id="notificationIcon" class="fas"></i>
            <span id="notificationText"></span>
        </div>
    </div>

    <!-- Include the required JavaScript files -->
    <script src="../js/gallery/utils.js"></script>
    <script src="../js/gallery/notifications.js"></script>
    <script src="https://js.stripe.com/v3/"></script>
    <script type="module">
        import { FavoritesManager } from '../js/gallery/favorites.js';
        window.FavoritesManager = FavoritesManager;
    </script>

    <script>
        // Register ScrollTrigger plugin
        gsap.registerPlugin(ScrollTrigger);

        let currentSort = 'latest';
        let currentPriceRange = 'all';
        let allArtworks = [];
        let animationInstance = null;

        // Function to handle animations
        function animateArtworkCards() {
            // Kill previous animation if it exists
            if (animationInstance) {
                animationInstance.kill();
            }

            // Create new animation
            animationInstance = gsap.from(".artwork-card", {
                y: 30,
                opacity: 0,
                duration: 0.5,
                stagger: {
                    each: 0.1,
                    from: "start"
                },
                ease: "power2.out",
                clearProps: "all", // Clear properties after animation
                scrollTrigger: {
                    trigger: "#artworksGrid",
                    start: "top 80%",
                    once: true // Only animate once
                }
            });
        }

        // Load marketplace artworks
        async function loadArtworks() {
            const artworksGrid = document.getElementById('artworksGrid');
            
            try {
                const [artworksResponse, favorites] = await Promise.all([
                    fetch('/api/artwork/marketplace'),
                    FavoritesManager.getFavorites()
                ]);
                
                const data = await artworksResponse.json();

            if (data.success) {
                // Only show regular artworks  
                allArtworks = data.data.regularArtworks || [];
                
                if (allArtworks.length > 0) {
                    displayArtworks(filterAndSortArtworks(), favorites);
                } else {
                    artworksGrid.innerHTML = `
                        <div class="col-span-full text-center py-8">
                            <p class="text-gray-500 mb-4">No artworks available in the marketplace yet.</p>
                            <a href="/login" class="inline-block px-6 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors">
                                Sell Your Art
                            </a>
                        </div>
                    `;
                }
            } else {
                throw new Error(data.error || 'Failed to load marketplace data');
            }
        } catch (error) {
            console.error('Error loading artworks:', error);
            artworksGrid.innerHTML = `
                <div class="col-span-full text-center py-8">
                    <p class="text-red-500 mb-4">Failed to load artworks. Please try again.</p>
                    <button onclick="loadArtworks()" class="px-6 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors">
                        Retry
                    </button>
                </div>
            `;
        }
    }

    async function displayArtworks(artworks, favorites = []) {
        const artworksGrid = document.getElementById('artworksGrid');
        
        if (artworks.length === 0) {
            artworksGrid.innerHTML = `
                <div class="col-span-full text-center py-8">
                    <p class="text-gray-500">No artworks found matching your criteria.</p>
                </div>
            `;
            return;
        }

        artworksGrid.innerHTML = artworks.map(artwork => {
            return `
            <div class="artwork-card mb-4 break-inside-avoid opacity-100">
                <div class="relative overflow-hidden shadow-md">
                    <img src="${artwork.image_url}" 
                         alt="${artwork.title}" 
                         class="w-full object-cover"
                         loading="lazy">
                    <div class="artwork-overlay absolute inset-0">
                        <div class="absolute top-4 right-4 flex gap-2">
                            <button onclick="FavoritesManager.toggleFavorite(event, '${artwork.id}')" 
                                    class="favorite-btn w-10 h-10 rounded-full flex items-center justify-center backdrop-blur-sm">
                                <i class="fas fa-heart ${favorites.includes(artwork.id) ? 'text-red-500' : 'text-white'}"></i>
                            </button>
                        </div>
                        <div class="absolute bottom-0 left-0 right-0 p-6 text-white">
                            <h3 class="text-lg font-medium">${artwork.title}</h3>
                            <p class="text-sm text-white/90">${artwork.description || 'No description'}</p>
                            <div class="mt-4 flex items-center justify-between">
                                <div>
                                    <span class="text-sm text-gray-300 mr-4">${artwork.views || 0} views</span>
                                    <span class="text-sm text-gray-300">${artwork.favorites || 0} favorites</span>
                                </div>
                                <div class="text-right">
                                    <span class="text-sm block">Price</span>
                                    <span class="text-xl font-bold">$${(artwork.price || 0).toFixed(2)}</span>
                                </div>
                                <button onclick="handlePurchase('${artwork.id}')" 
                                        class="px-4 py-2 bg-amber-50 text-black rounded-lg hover:bg-amber-200 transition-colors">
                                    Buy Now
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            `;
        }).join('');

        // Trigger animations after content is loaded
        requestAnimationFrame(() => {
            animateArtworkCards();
        });
    }

        function filterAndSortArtworks() {
            let filtered = [...allArtworks];

            // Apply price range filter
            if (currentPriceRange !== 'all') {
                const [min, max] = currentPriceRange.split('-').map(Number);
                filtered = filtered.filter(artwork => {
                    const price = parseFloat(artwork.price);
                    if (max) {
                        return price >= min && price <= max;
                    } else {
                        return price >= min;
                    }
                });
            }

            // Apply sorting
            filtered.sort((a, b) => {
                switch (currentSort) {
                    case 'price-low':
                        return parseFloat(a.price) - parseFloat(b.price);
                    case 'price-high':
                        return parseFloat(b.price) - parseFloat(a.price);
                    case 'latest':
                    default:
                        return new Date(b.created_at) - new Date(a.created_at);
                }
            });

            return filtered;
        }

        function updateSort(value) {
            currentSort = value;
            loadArtworks(); // Reload with new sort
        }

        function updatePriceRange(value) {
            currentPriceRange = value;
            loadArtworks(); // Reload with new price range
        }

        function timeRemaining(endTime) {
            const now = new Date();
            const end = new Date(endTime);
            const diff = end - now;
            
            if (diff <= 0) return 'Ended';
            
            const days = Math.floor(diff / (1000 * 60 * 60 * 24));
            const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            
            if (days > 0) return `${days}d ${hours}h`;
            if (hours > 0) return `${hours}h`;
            return '<1h';
        }

        async function handlePurchase(artworkId) {
            checkAuth().then(async () => {
                    const artwork = allArtworks.find(a => a.id === artworkId && !a.isAuction);
                    if (!artwork) {
                        NotificationManager.show('error', 'Artwork not found');
                        return;
                    }

                    if (confirm(`Purchase "${artwork.title}" for $${artwork.price.toFixed(2)}?`)) {
                        try {
                            const response = await fetch('/api/artwork/create-checkout-session', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ artworkId })
                            });

                            const data = await response.json();

                            if (data.success) {
                                const stripe = Stripe('<%= STRIPE_PUBLISHABLE_KEY %>');
                                const result = await stripe.redirectToCheckout({
                                    sessionId: data.sessionId
                                });

                                if (result.error) {
                                    NotificationManager.show('error', result.error.message);
                                }
                            } else {
                                NotificationManager.show('error', data.error || 'Failed to create payment intent');
                            }
                        } catch (error) {
                            console.error('Error creating payment intent:', error);
                            NotificationManager.show('error', 'Failed to initiate checkout');
                        }
                    }
                });
            }

            function handleBid(artworkId) {
            checkAuth().then(() => {
                const artwork = allArtworks.find(a => a.id === artworkId && a.isAuction);
                if (!artwork) {
                    NotificationManager.show('error', 'Auction not found');
                    return;
                }

                const minBid = artwork.current_bid ? 
                    artwork.current_bid * 1.1 : 
                    artwork.starting_bid;
                
                const bidAmount = prompt(
                    `Enter your bid for "${artwork.title}"\n` +
                    `Minimum bid: $${minBid.toFixed(2)}`,
                    minBid.toFixed(2)
                );

                if (bidAmount && !isNaN(bidAmount) && parseFloat(bidAmount) >= minBid) {
                    NotificationManager.show('info', 'Placing bid...');
                    // In a real app, submit bid to server
                    // submitBid(artworkId, parseFloat(bidAmount));
                } else if (bidAmount !== null) {
                    NotificationManager.show('error', `Bid must be at least $${minBid.toFixed(2)}`);
                }
            });
        }

        function checkAuth() {
            return fetch('/auth/check', { credentials: 'include' })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Not authenticated');
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data.success) {
                        window.location.href = `/login?redirect=${encodeURIComponent(window.location.pathname)}`;
                        return Promise.reject('Not authenticated');
                    }
                    return data;
                })
                .catch(error => {
                    console.error('Auth check failed:', error);
                    window.location.href = `/login?redirect=${encodeURIComponent(window.location.pathname)}`;
                    return Promise.reject(error);
                });
        }

        // Load content when page loads
        document.addEventListener('DOMContentLoaded', () => {
            loadArtworks();
        });

        document.addEventListener("DOMContentLoaded", function () {
    const toggleButton = document.querySelector(".burger");
    let isOpen = false;

    gsap.set(".menu-item p", { y: 225 });

    const timeline = gsap.timeline({ paused: true });

    timeline.to(".overlay", {
      duration: 1.5,
      clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
      ease: "power4.out",
    });

    timeline.to(".menu-item p", {
      duration: 1.5,
      y: 0,
      stagger: 0.2,
      ease: "power4.out",
    }, "-=1");

    // Find the header element
    const header = document.querySelector(".header"); 

    toggleButton.addEventListener("click", function () {
      this.classList.toggle("active");
      header.classList.toggle("menu-open"); // Toggle class on header
      if (isOpen) {
        timeline.timeScale(2).reverse(); // Reverse animation faster (e.g., 2x speed)
      } else {
        timeline.timeScale(1).play(); // Play forward at normal speed
      }
      isOpen = !isOpen;
    });
});
    </script>
</body>
</html>
